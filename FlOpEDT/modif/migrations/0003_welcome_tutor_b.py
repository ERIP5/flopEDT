# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-06-04 09:24
from __future__ import unicode_literals

from django.db import migrations


def fake_to_abstract(apps, schema_editor):
    FakeUser = apps.get_model('modif', 'FakeUser')
    Tutor = apps.get_model('modif', 'Tutor')
    for fu in FakeUser.objects.all():
        u = Tutor(
            username = fu.username,
            first_name = fu.first_name,
            last_name = fu.last_name,
            email = fu.email,
            password = fu.password,
            is_staff = fu.is_staff,
            is_active = fu.is_active,
            is_superuser = fu.is_superuser,
            status = fu.status,
            pref_slots_per_day = fu.pref_slots_per_day,
            rights = fu.rights,
            LBD = fu.LBD
        )
        u.save()


def ref_tutor(apps, schema_editor):
    Tutor = apps.get_model('modif', 'Tutor')

    Module = apps.get_model('modif', 'Module')
    for m in Module.objects.all():
        try:
            if m.head_name is not None:
                tut = Tutor.objects.get(username = m.head_name)
            else:
                tut = None
            m.head = tut
            m.save()
        except:
            print u'Tutor problem (Module)'

    Cours = apps.get_model('modif', 'Cours')
    for c in Cours.objects.all():
        try:
            tut = None
            if c.tutor_name is not None:
                tut = Tutor.objects.get(username = c.tutor_name)
            supp_tut = None
            if c.supp_tutor_name is not None:
                supp_tut = Tutor.objects.get(username = c.supp_tutor_name)
            c.tutor = tut
            c.supp_tutor = supp_tut
            c.save()
        except:
            print u'Tutor problem (Cours)'

    Disponibilite = apps.get_model('modif', 'Disponibilite')
    for d in Disponibilite.objects.all():
        try:
            tut = None
            if d.tutor_name is not None:
                tut = Tutor.objects.get(username = d.tutor_name)
            d.tutor = tut
            d.save()
        except:
            print u'Tutor problem (Disponibilite)'

    CoursModification = apps.get_model('modif', 'CoursModification')
    for cm in CoursModification.objects.all():
        try:
            tut = None
            if cm.initiator_name is not None:
                tut = Tutor.objects.get(username = cm.initiator_name)
            cm.initiator = tut
            cm.save()
        except:
            print u'Tutor problem (CoursModification)'

    PlanifModification = apps.get_model('modif', 'PlanifModification')
    for pm in PlanifModification.objects.all():
        try:
            old = None
            if pm.tutor_name_old is not None:
                old = Tutor.objects.get(username = pm.tutor_name_old)
            pm.tutor_old = old
            ini = None
            if pm.initiator_name is not None:
                ini = Tutor.objects.get(username = pm.initiator_name)
            pm.initiator = ini
            pm.save()
        except:
            print u'Tutor problem (PlanifModification)'

    CoutProf = apps.get_model('modif', 'CoutProf')
    for cp in CoutProf.objects.all():
        try:
            tut = None
            if cp.tutor_name is not None:
                tut = Tutor.objects.get(username = cp.tutor_name)
            cp.tutor = tut
            cp.save()
        except:
            print u'Tutor problem (CoutProf)'

    FullStaffTmp = apps.get_model('modif', 'FullStaffTmp')
    for fs in FullStaffTmp.objects.all():
        try:
            tut = None
            if fs.tutor_name is not None:
                tut = Tutor.objects.get(username = fs.tutor_name)
            fs.tutor = tut
            fs.save()
        except:
            print u'Tutor problem (FullStaffTmp)'

    VacataireTmp = apps.get_model('modif', 'VacataireTmp')
    for fs in VacataireTmp.objects.all():
        try:
            tut = None
            if fs.tutor_name is not None:
                tut = Tutor.objects.get(username = fs.tutor_name)
            fs.tutor = tut
            fs.save()
        except:
            print u'Tutor problem (VacataireTmp)'

    BIATOSTmp = apps.get_model('modif', 'BIATOSTmp')
    for fs in BIATOSTmp.objects.all():
        try:
            tut = None
            if fs.tutor_name is not None:
                tut = Tutor.objects.get(username = fs.tutor_name)
            fs.tutor = tut
            fs.save()
        except:
            print u'Tutor problem (BIATOSTmp)'


class Migration(migrations.Migration):

    dependencies = [
        ('modif', '0002_welcome_tutor'),
    ]

    operations = [
        migrations.RunPython(fake_to_abstract),
        migrations.RunPython(ref_tutor),
    ]
