# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-06-01 09:55
from __future__ import unicode_literals

from django.db import migrations, models
from django.db.models.deletion import CASCADE
from django.core.validators import MinValueValidator, MaxValueValidator


def create_fake_user(apps, schema_editor):
    User = apps.get_model('django.contrib.auth.models.User')
    FakeUser = apps.get_model('FakeUser')
    for u in User.objects.all():
        fu = FakeUser(
            username = u.username,
            first_name = u.first_name,
            last_name = u.last_name,
            email = u.email,
            password = u.password,
            is_staff = u.is_staff,
            is_active = u.is_active,
            is_superuser = u.is_superuser,
            status = u.proff.statut,
            pref_slots_per_day = u.proff.pref_slots_per_day,
            rights = u.proff.rights,
            LBD = u.proff.LBD
        )
        fu.save()


def create_tutor_names(apps, schema_editor):

    Module = apps.get_model('Module')
    for m in Module.objects.all():
        m.head_name = m.responsable.username
        m.save()

    Disponibilite = apps.get_model('Disponibilite')
    for d in Disponibilite.objects.all():
        d.tutor_name = d.prof.user.username
        d.save()

    CoursModification = apps.get_model('CoursModification')
    for cm in CoursModification.objects.all():
        cm.initiator_name = cm.user.username
        cm.save()

    PlanifModification = apps.get_model('PlanifModification')
    for pm in PlanifModification.objects.all():
        pm.initiator_name = pm.user.username
        pm.tutor_name_old = pm.prof_old
        pm.save()

    Cours = apps.get_model('Cours')
    for c in Cours.objects.all():
        c.tutor_name = c.prof.user.username
        c.supp_tutor_name = c.profsupp.user.username
        c.save()

    CoutProf = apps.get_model('CoutProf')
    for cp in CoutProf.objects.all():
        cp.tutor_name = cp.prof.user.username
        cp.save()

    FullStaff = apps.get_model('FullStaff')
    FullStaffTmp = apps.get_model('FullStaffTmp')
    for fs in FullStaff.objects.all():
        fst = FullStaffTmp(
            tutor_name = fs.user.username,
            department = fs.departement,
            is_iut = fs.is_iut
        )
        fst.save()

    Vacataire = apps.get_model('Vacataire')
    VacataireTmp = apps.get_model('VacataireTmp')
    for v in Vacataire.objects.all():
        vt = VacataireTmp(
            tutor_name = v.user.username,
            employer = v.employer,
            qualite = v.qualite,
            field = v.field
        )
        vt.save()

    BIATOS = apps.get_model('BIATOS')
    BIATOSTmp = apps.get_model('BIATOSTmp')
    for b in BIATOS.objects.all():
        bt = BIATOSTmp(
            tutor_name = b.user.username
        )
        bt.save()


class Migration(migrations.Migration):

    dependencies = [
        ('modif', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='FakeUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=150)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.EmailField(max_length=254)),
                ('password', models.CharField(max_length=100)),
                ('is_staff', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('is_superuser', models.BooleanField()),
            ],
        ),
        migrations.AddField(
            model_name='module',
            name='head_name',
            field=models.CharField(default='', max_length=150),
        ),
        migrations.CreateModel(
            name = 'FullStaffTmp',
            fields = [
                ('id', models.AutoField(auto_created = True, primary_key = True,
                                        serialize = False,
                                        verbose_name = 'ID')),
                ('tutor_name', models.CharField(max_length = 150)),
                ('department',
                 models.CharField(default = 'INFO', max_length = 50)),
                ('is_iut', models.BooleanField(default = True)),
            ],
        ),
        migrations.CreateModel(
            name = 'VacataireTmp',
            fields = [
                ('prof_ptr', models.OneToOneField(auto_created = True,
                                                  on_delete = CASCADE,
                                                  parent_link = True,
                                                  primary_key = True,
                                                  serialize = False,
                                                  to = 'modif.Prof')),
                ('tutor_name', models.CharField(max_length = 150)),
                ('employer', models.CharField(max_length = 50, null = True,
                                              verbose_name = 'Employeur ?')),
                ('qualite', models.CharField(max_length = 50, null = True)),
                ('field', models.CharField(max_length = 50, null = True,
                                           verbose_name = 'Domaine ?')),
            ],
            bases = ('modif.prof',),
        ),
        migrations.RemoveField(
            model_name = 'student',
            name = 'group',
        ),
        migrations.RemoveField(
            model_name = 'student',
            name = 'user',
        ),
        migrations.AddField(
            model_name = 'cours',
            name = 'supp_tutor_name',
            field = models.CharField(blank = True, default = None,
                                     max_length = 150, null = True),
        ),
        migrations.AddField(
            model_name = 'cours',
            name = 'tutor_name',
            field = models.CharField(default = None, max_length = 150,
                                     null = True),
        ),
        migrations.AddField(
            model_name = 'coursmodification',
            name = 'initiator_name',
            field = models.CharField(default = None, max_length = 150,
                                     null = True),
        ),
        migrations.AddField(
            model_name = 'coutprof',
            name = 'tutor_name',
            field = models.CharField(default = None, max_length = 150,
                                     null = True),
        ),
        migrations.AddField(
            model_name = 'disponibilite',
            name = 'tutor_name',
            field = models.CharField(default = None, max_length = 150,
                                     null = True),
        ),
        migrations.AddField(
            model_name = 'fakeuser',
            name = 'LBD',
            field = models.PositiveSmallIntegerField(default = 2, validators = [
                MinValueValidator(0),
                MaxValueValidator(4)],
                                                     verbose_name = 'Limitation du nombre de jours'),
        ),
        migrations.AddField(
            model_name = 'fakeuser',
            name = 'pref_slots_per_day',
            field = models.PositiveSmallIntegerField(default = 4,
                                                     verbose_name = 'Combien de cr\xe9neaux par jour au mieux ?'),
        ),
        migrations.AddField(
            model_name = 'fakeuser',
            name = 'rights',
            field = models.PositiveSmallIntegerField(default = 0,
                                                     verbose_name = 'Peut forcer ?'),
        ),
        migrations.AddField(
            model_name = 'fakeuser',
            name = 'status',
            field = models.CharField(choices = [('Vac', 'Vacataire'), (
            'FuS', 'Permanent UT2J (IUT ou non)'), ('BIA', 'BIATOS')],
                                     default = 'FuS', max_length = 3),
        ),
        migrations.AddField(
            model_name = 'groupe',
            name = 'parent_groups',
            field = models.ManyToManyField(blank = True,
                                           related_name = '_groupe_parent_groups_+',
                                           to = 'modif.Groupe'),
        ),
        migrations.AddField(
            model_name = 'planifmodification',
            name = 'initiator_name',
            field = models.CharField(default = None, max_length = 150,
                                     null = True),
        ),
        migrations.AddField(
            model_name = 'planifmodification',
            name = 'tutor_name_old',
            field = models.CharField(default = None, max_length = 150,
                                     null = True),
        ),
        migrations.AlterField(
            model_name = 'coursmodification',
            name = 'updated_at',
            field = models.DateTimeField(),
        ),
        migrations.AlterField(
            model_name = 'module',
            name = 'head_name',
            field = models.CharField(default = None, max_length = 150,
                                     null = True),
        ),
        migrations.AlterField(
            model_name = 'planifmodification',
            name = 'updated_at',
            field = models.DateTimeField(),
        ),
        migrations.DeleteModel(
            name = 'Student',
        ),
        migrations.CreateModel(
            name='BIATOSTmp',
            fields=[
                ('prof_ptr', models.OneToOneField(auto_created=True, on_delete=CASCADE, parent_link=True, primary_key=True, serialize=False, to='modif.Prof')),
                ('tutor_name', models.CharField(max_length=150)),
            ],
            bases=('modif.prof',),
        ),
        migrations.RunPython(create_fake_user),
        migrations.RunPython(create_tutor_names),
    ]
