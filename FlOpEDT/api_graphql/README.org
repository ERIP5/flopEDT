#+STARTUP: overview
#+title: README GraphQL ; pour les L3
#+options: author:nil

Un =README= sur la mise en place de l'API sous GraphQL.

Actuellement sur la branche =graphql= du git général.

* Configuration
- On utilise le module python [[https://docs.graphene-python.org/projects/django/en/latest/][graphene-django]] dans =Django=.
** TODO Installer les nouveaux modules python
Activer son environnement virtuel, et
  #+begin_src shell
    cd FlOpEDT
    pip install -r ../requirements.txt
  #+end_src
** TODO Modifier les droits en base
Autoriser l'utilisateur =flop_user= à créer une base de données. Pendant la
phase de tests, =pytest= va en effet utiliser ce =user= pour créer une base de
données :
  #+begin_src sql
    ALTER USER flop_user CREATEDB ;
  #+end_src

* Requêtes interactives
- =graphiql= est disponible à =localhost:8000/graphql=
- Possibilité de faire des requêtes interactives pour tester ou découvrir
- Il y a de l'autocomplétion, c'est pratique

* Tests
- On utilise [[https://realpython.com/pytest-python-testing/][pytest]]
- Pour l'instant, il reste des tests obsolètes, donc le lancer avec
  #+begin_src shell
    pytest api_graphql
  #+end_src
- Cette exécution-ci ne doit conduire à aucune erreur. Lors de la phase d'ajout
  de tests, une autre exécution conduira sûrement à une erreur.

* Nodes (/Serializers)
- Un exemple dans =dummy/types.py=
- Une classe qui implémente l'interface =relay.Node=, un autre non.
- Sans =relay.Node=, la =Query= peut avoir un champ de type liste avec =List=
- Avec =relay.Node=, la =Query= peut avoir un champ de type liste avec =DjangoFilterConnectionField=
- Avec =relay.Node=, on peut faire des filtres plus facilement (/cf./ le champ
  =filter_fields= de la classe =Meta= de =DepartmentNode= -- dans
  =api_graphql/dummy/types.py=). Pour un exemple de requête, voir
  =api_graphql/dummy/test=
  
* Resolvers
- Un exemple dans =dummy/resolvers.py=
- Pour résoudre des champs (calculer leurs valeurs)

* Query
- Un exemple dans =dummy.query.py=
- La =Query= qui servira ce sous-répertoire.

* Organisation
- Sous le répertoire =api_graphql=, on split en sous-répertoires, dont la
  structure peut ressembler à =dummy=.
  - Un sous-répertoire =types.py= pour définir les types de données manipulées
    (qui font le lien entre les objets en base (ou plutôt des objets vus via
    l'ORM (Object Relational Mapping)) et la machine cliente)
  - Un sous-répertoire =resolvers.py= pour définir
- Pour l'organisation du travail, une proposition :
  - composition de binômes
    - un rôle de conception de tests
    - un rôle de conception des requêtes
  - au sein d'un binôme, échange des rôles tous les jours ou tous les deux jours
  - commencer la journée par se mettre d'accord sur
    - quelles requêtes seront traitées dans la journée
    - une spécification précise des requêtes
  - lorsque les deux personnes ont fini une requête donnée, tester et corriger

* Remarques
- Attention, les erreurs ne sont pas toujours très explicites. Plutôt que de
  laisser tourner le =runserver=, vous pouvez lancer un shell django
  #+begin_src python
    ./manage.py shell
  #+end_src
  et faire des import à la main pour voir si rien d'évident n'est à corriger
  #+begin_src python
    from api_graphql.dummy import types, query, resolvers
  #+end_src
